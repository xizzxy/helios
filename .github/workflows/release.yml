name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'
  REGISTRY: ghcr.io

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get release version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binaries
      run: |
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -ldflags "-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o bin/helios-gateway-linux-amd64 ./cmd/helios-gateway
        GOOS=linux GOARCH=arm64 go build -ldflags "-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o bin/helios-gateway-linux-arm64 ./cmd/helios-gateway
        GOOS=darwin GOARCH=amd64 go build -ldflags "-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o bin/helios-gateway-darwin-amd64 ./cmd/helios-gateway
        GOOS=darwin GOARCH=arm64 go build -ldflags "-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o bin/helios-gateway-darwin-arm64 ./cmd/helios-gateway
        GOOS=windows GOARCH=amd64 go build -ldflags "-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o bin/helios-gateway-windows-amd64.exe ./cmd/helios-gateway
        
        GOOS=linux GOARCH=amd64 go build -ldflags "-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o bin/helios-control-linux-amd64 ./cmd/helios-control
        GOOS=linux GOARCH=arm64 go build -ldflags "-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o bin/helios-control-linux-arm64 ./cmd/helios-control
        GOOS=darwin GOARCH=amd64 go build -ldflags "-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o bin/helios-control-darwin-amd64 ./cmd/helios-control
        GOOS=darwin GOARCH=arm64 go build -ldflags "-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o bin/helios-control-darwin-arm64 ./cmd/helios-control
        GOOS=windows GOARCH=amd64 go build -ldflags "-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o bin/helios-control-windows-amd64.exe ./cmd/helios-control

    - name: Create checksums
      run: |
        cd bin
        sha256sum * > checksums.txt

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta-gateway
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/xizzxy/helios-gateway
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Extract metadata
      id: meta-control
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/xizzxy/helios-control
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Gateway Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/Dockerfile.gateway
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-gateway.outputs.tags }}
        labels: ${{ steps.meta-gateway.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.VERSION }}

    - name: Build and push Control Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/Dockerfile.control
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-control.outputs.tags }}
        labels: ${{ steps.meta-control.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.VERSION }}

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          sed -n "/^## \[*${{ steps.version.outputs.VERSION }}\]/,/^## /p" CHANGELOG.md | sed '$d' > RELEASE_CHANGELOG.md
        else
          echo "Release ${{ steps.version.outputs.VERSION }}" > RELEASE_CHANGELOG.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          bin/*
        body_path: RELEASE_CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Helm chart
      if: "!contains(steps.version.outputs.VERSION, '-')"
      run: |
        # Update Helm chart version and app version
        sed -i "s/version: .*/version: ${{ steps.version.outputs.VERSION }}/" deploy/k8s/helm/Chart.yaml
        sed -i "s/appVersion: .*/appVersion: ${{ steps.version.outputs.VERSION }}/" deploy/k8s/helm/Chart.yaml
        
        # Commit changes
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add deploy/k8s/helm/Chart.yaml
        git commit -m "chore: update Helm chart to ${{ steps.version.outputs.VERSION }}" || exit 0
        git push